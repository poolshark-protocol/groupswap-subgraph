type GroupOrder @entity {
  id:              ID!
  groupAmount:     BigInt!
  groupGwei:       BigInt!
  fromToken:       Bytes!
  destToken:       Bytes!
  orderTxnHashes:  [Bytes!]!
}

type UserAccount @entity {
  id:           ID!
  groupAmounts: String!
}

type OpenOrder @entity {
  id:           ID!
  account:      Bytes!
  groupId:      Bytes!
  fromToken:    Bytes!
  destToken:    Bytes!
  fromAmount:   BigInt!
  gweiAdded:    BigInt!
  blockNumber:  BigInt!
  blockIndex:   BigInt!
}

type ExecutedOrder @entity {
  id:           ID!
  account:      Bytes!
  groupId:      Bytes!
  fromToken:    Bytes!
  destToken:    Bytes!
  destAmount:   BigInt!
  gweiLeft:     BigInt!
  groupTxnHash: BigInt!
  blockNumber:  BigInt!
  blockIndex:   BigInt!
}

type CancelledOrder @entity {
  id:              ID!
  account:         Bytes!
  fromToken:       Bytes!
  destToken:       Bytes!
  depositTxnHash:  Bytes!
  withdrawTxnHash: Bytes!
  transferTxnHash: Bytes!
  fromAmount:      BigInt!
}

type CompletedOrder @entity {
  id:           ID!
  account:      Bytes!
  fromToken:    Bytes!
  destToken:    Bytes!
  destAmount:   BigInt!
  groupTxnHash: Bytes!
}

type GroupExecution @entity {
  id:                ID!
  groupId:           Bytes!
  inputAmount:       BigInt!
  returnAmount:      BigInt!
  returnAmountLeft:  BigInt!
  usedGas:           BigInt!
  txnHash:           Bytes!
  compltdTxnHashes: [Bytes!]!
  blockNumber:       BigInt!
  blockIndex:        BigInt!
}

type CancelRequest @entity {
  id:            ID!
  account:       Bytes!
  groupId:       Bytes!
  withdrawToken: Bytes! 
  amount:        BigInt!
}

type WithdrawRequest @entity {
  id:              ID!
  account:         Bytes!
  groupId:         Bytes!
  withdrawToken:   Bytes! 
  amount:          BigInt!
  groupTxnHash:    Bytes!
  withdrawTxnHash: Bytes!
}

type WithdrawApproved @entity {
  id:       ID!
  address:  Bytes!
  groupIds: [Bytes!]!
  amounts:  [BigInt!]!
}

type WithdrawDeclined @entity {
  id:       ID!
  address:  Bytes!
  groupIds: [Bytes!]!
  amounts:  [BigInt!]!
}