type GroupOrder @entity {
  id:              ID!
  groupAmount:     BigInt!
  groupGwei:       BigInt!
  fromToken:       Bytes!
  destToken:       Bytes!
  orderTxnHashes:  [Bytes!]!
}

type Order @entity {
  id:              ID!
  account:         Bytes!
  status:          String!
  groupId:         Bytes!
  fromToken:       Bytes!
  destToken:       Bytes!
  fromAmount:      BigInt!
  destAmount:      BigInt!
  returnAmount:    BigInt
  groupTxnHash:    Bytes
  weiAdded:        BigInt!
  weiReturned:     BigInt
  depstTxnHash:    Bytes!
  depstAmount:     BigInt!
  depstBlock:      BigInt!
  depstIndex:      BigInt!
  canclTxnHashes:  [Bytes!]!
  canclAmount:     BigInt!
  wthdrwTxnHashes: [Bytes!]!
  wthdrwAmount:    BigInt!
  trnsfrTxnHashes: [Bytes!]!
  trnsfrAmount:    BigInt!
}

type GroupExecution @entity {
  id:                ID!
  groupId:           Bytes!
  inputAmount:       BigInt!
  returnAmount:      BigInt!
  returnAmountLeft:  BigInt!
  usedGas:           BigInt!
  compltdTxnHashes: [Bytes!]!
  blockNumber:       BigInt!
  blockIndex:        BigInt!
}

type CancelRequest @entity {
  id:              ID!
  account:         Bytes!
  orderTxnHash:    Bytes!
  withdrawToken:   Bytes! 
  amount:          BigInt!
  block:           BigInt!
  blockIndex:      BigInt!
}

type WithdrawRequest @entity {
  id:              ID!
  account:         Bytes!
  orderTxnHash:    Bytes!
  withdrawToken:   Bytes! 
  amount:          BigInt!
  block:           BigInt!
  blockIndex:      BigInt!
}

type WithdrawApproved @entity {
  id:       ID!
  address:  Bytes!
  groupIds: [Bytes!]!
  amounts:  [BigInt!]!
}

type WithdrawDeclined @entity {
  id:       ID!
  address:  Bytes!
  groupIds: [Bytes!]!
  amounts:  [BigInt!]!
}